# -*- coding: utf-8 -*-
"""Data_Processing.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Mk9fehl0GvXa1zxG5F6Mxwl6_LVe0iM2

#Data Processing

This script processes midi files and saves them to a csv file

# Imports
"""

#!pip install music21

import numpy as np
#import pandas as pd
import matplotlib.pyplot as plt
import matplotlib.lines as mlines
import glob
import os
#import fnmatch

from music21 import *

#

# This function can be used if the parallel function doesn't work
def convert_midi(pathName):
  fileNames = glob.glob(pathName)
  files = []

  for fileName in fileNames:
    print("Converting "+ fileName)
    files.append(converter.parse(os.path.join(os.getcwd(), fileName)))
  return files


# this is expensive
def get_features(files):
  dataSet = features.DataSet(classLabel='data')
  f = [features.native.DiminishedSeventhSimultaneityPrevalence,
       features.native.DiminishedTriadSimultaneityPrevalence,
       features.native.DominantSeventhSimultaneityPrevalence,
       features.native.MajorTriadSimultaneityPrevalence,
       features.native.MinorTriadSimultaneityPrevalence,
       features.native.MostCommonNoteQuarterLength,
       features.native.MinorTriadSimultaneityPrevalence,
       features.native.MostCommonNoteQuarterLength,
       features.native.MostCommonNoteQuarterLengthPrevalence,
       features.native.MostCommonPitchClassSetSimultaneityPrevalence,
       features.native.MostCommonSetClassSimultaneityPrevalence,
       features.native.RangeOfNoteQuarterLengths,
       features.native.TonalCertainty,
       features.native.TriadSimultaneityPrevalence,
       features.native.UniqueNoteQuarterLengths,
       features.native.UniquePitchClassSetSimultaneities,
       features.native.UniqueSetClassSimultaneities,
       features.jSymbolic.AmountOfArpeggiationFeature,
       features.jSymbolic.MostCommonPitchClassFeature,
       features.jSymbolic.PitchVarietyFeature,
       features.jSymbolic.BasicPitchHistogramFeature
       ]

  dataSet.addFeatureExtractors(f)

  for m in files:
    # extract data from every file
    dataSet.addData(m)
  
  dataSet.process()
  #dataSet.write('DataSet.csv')
  return dataSet


